"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedMongoDBContainer = exports.MongoDBContainer = void 0;
const testcontainers_1 = require("testcontainers");
const MONGODB_PORT = 27017;
class MongoDBContainer extends testcontainers_1.GenericContainer {
    constructor(image) {
        super(image);
        this.withExposedPorts(MONGODB_PORT)
            .withCommand(["--replSet", "rs0"])
            .withWaitStrategy(testcontainers_1.Wait.forLogMessage(/.*waiting for connections.*/i))
            .withStartupTimeout(120_000);
    }
    async start() {
        return new StartedMongoDBContainer(await super.start());
    }
    async containerStarted(startedTestContainer) {
        await this.initReplicaSet(startedTestContainer);
    }
    async initReplicaSet(startedTestContainer) {
        await this.executeMongoEvalCommand(startedTestContainer, "rs.initiate();");
        await this.executeMongoEvalCommand(startedTestContainer, this.buildMongoWaitCommand());
    }
    async executeMongoEvalCommand(startedTestContainer, command) {
        const execResult = await startedTestContainer.exec(this.buildMongoEvalCommand(command));
        this.checkMongoNodeExitCode(execResult);
    }
    buildMongoEvalCommand(command) {
        return [this.getMongoCmdBasedOnImageTag(), "--eval", command];
    }
    getMongoCmdBasedOnImageTag() {
        return parseInt(this.imageName.tag[0]) >= 5 ? "mongosh" : "mongo";
    }
    checkMongoNodeExitCode(execResult) {
        const { exitCode, output } = execResult;
        if (execResult.exitCode !== 0) {
            throw new Error(`Error running mongo command. Exit code ${exitCode}: ${output}`);
        }
    }
    buildMongoWaitCommand() {
        return `
    var attempt = 0;
    while(db.runCommand({isMaster: 1}).ismaster==false) {
      if (attempt > 60) {
        quit(1);
      }
      print(attempt); sleep(100); attempt++;
    }
    `;
    }
}
exports.MongoDBContainer = MongoDBContainer;
class StartedMongoDBContainer extends testcontainers_1.AbstractStartedContainer {
    constructor(startedTestContainer) {
        super(startedTestContainer);
    }
    getConnectionString() {
        return `mongodb://${this.getHost()}:${this.getMappedPort(MONGODB_PORT)}`;
    }
}
exports.StartedMongoDBContainer = StartedMongoDBContainer;
//# sourceMappingURL=mongodb-container.js.map